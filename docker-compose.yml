version: '3.8'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    restart: always
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka-1:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-1
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-1:19092,EXTERNAL://localhost:9092,DOCKER://host.docker.internal:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-2:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-2
    restart: always
    depends_on:
      - zookeeper
      - kafka-1
    ports:
      - "9093:9093"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-2:19093,EXTERNAL://localhost:9093,DOCKER://host.docker.internal:29093
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-3:
    image: confluentinc/cp-kafka:latest
    container_name: kafka-3
    restart: always
    depends_on:
      - zookeeper
      - kafka-1
      - kafka-2
    ports:
      - "9094:9094"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://kafka-3:19094,EXTERNAL://localhost:9094,DOCKER://host.docker.internal:29094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,EXTERNAL:PLAINTEXT,DOCKER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    restart: always
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8080:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local-cluster
      KAFKA_CLUSTERS_0_BOOTSTRAP_SERVERS: kafka-1:19092,kafka-2:19093,kafka-3:19094
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181

  #
  # PRODUCER service
  #
  php-producer:
    build: ./php
    container_name: php-producer
    volumes:
      - ./:/var/www/html
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3

  #
  # CONSUMER service
  #
  php-consumer:
    build: ./php
    container_name: php-consumer
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ./:/var/www/html
    command: ["php", "consumer.php"]

  #
  # Nginx
  #
  nginx:
    build: ./nginx
    container_name: nginx
    depends_on:
      - php-producer
    ports:
      - "8000:80"
    volumes:
      - ./:/var/www/html
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf

  producer-poller:
    build: ./php
    container_name: producer-poller
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ./:/var/www/html
    command: ["php", "producer-poller.php"]

  php-transformer:
    build: ./php
    container_name: php-transformer
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    volumes:
      - ./:/var/www/html
    command: ["php", "transformer.php"]

  #
  # ksqlDB Server
  #
  ksqldb-server:
    image: confluentinc/ksqldb-server:latest
    container_name: ksqldb-server
    depends_on:
      - kafka-1
      - kafka-2
      - kafka-3
    ports:
      - "8088:8088"    # ksqlDB Server UI/REST port
    environment:
      KSQL_CONFIG_DIR: "/etc/ksqldb"
      KSQL_BOOTSTRAP_SERVERS: "kafka-1:19092,kafka-2:19093,kafka-3:19094"
      # A unique application ID for your ksqlDB service
      KSQL_KSQL_SERVICE_ID: "ksql_service_01"
      # Enable auto topic creation if you like
      KSQL_KSQL_SINK_TOPIC_CREATE_RETENTION_MS: 2000000
      KSQL_KSQL_SINK_TOPIC_CREATE_PARTITIONS: 1

  ksqldb-cli:
    image: confluentinc/ksqldb-cli:latest
    container_name: ksqldb-cli
    depends_on:
      - ksqldb-server
    entrypoint: /bin/sh
    tty: true

  keycloak:
    image: quay.io/keycloak/keycloak:25.0.0
    container_name: keycloak
    ports:
      - "8081:8080" 
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: "start-dev"

